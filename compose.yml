networks:
  daemonic:
    # this is required to set a static IP for the schema registry. we need a
    # static IP for the registry because the confluent client library does
    # not accept any non IP address looking hostnames (e.g. we can't use
    # localhost, nor can we use the service name `schema-registry` which
    # would normally work in docker compose)
    ipam:
      driver: default
      config:
        - subnet: "172.16.198.0/24"

services:
  kafka-broker:
    image: confluentinc/cp-kafka:7.6.4
    container_name: kafka-broker
    ports:
      - "9091:9092"
      - "9092:9092"
      - "9093:9092"
      - "2181:2181"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: L-InH5XoT2e0bDsYn_xk9A
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:29093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka-broker:29092,CONTROLLER://localhost:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - daemonic
    healthcheck:
      test:
        - "CMD-SHELL"
        - "kafka-topics --bootstrap-server kafka-broker:29092 --list || exit 1"
      interval: 1s
      timeout: 10s
      retries: 12

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.2
  #   profiles: ["all", "kafka"]
  #   container_name: schema-registry
  #   depends_on:
  #     kafka-broker:
  #       condition: service_healthy
  #   networks:
  #     daemonic:
  #       ipv4_address: 172.16.238.123
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: ${MOM_KAFKA_BROKER_URIS}
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #     SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL: backward_transitive
  #   healthcheck:
  #     test: echo stat | nc localhost 8081
  #     interval: 2s
  #     timeout: 10s
  #     retries: 60
  #
  # otel-uptrace:
  #   image: "uptrace/uptrace:1.3.1"
  #   profiles: ["all"]
  #   platform: linux/amd64
  #   restart: on-failure
  #   volumes:
  #     - oteluptracedata:/var/lib/uptrace
  #     - ./telemetry/uptrace.yml:/etc/uptrace/uptrace.yml
  #   ports:
  #     - "14317:14317"
  #     - "14318:14318"
  #   networks:
  #     - daemonic
  #   healthcheck:
  #     test: ["CMD", "wget", "--spider", "-q", "localhost:14318/"]
  #     interval: 1s
  #     timeout: 1s
  #     retries: 30
  #   depends_on:
  #     otel-clickhouse:
  #       condition: service_healthy
  #
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:0.70.0
  #   profiles: ["all"]
  #   restart: on-failure
  #   user: "0:0" # required for logs
  #   volumes:
  #     - ./telemetry/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
  #   ports:
  #     - "4317:4317"
  #     - "4318:4318"
  #   networks:
  #     - daemonic
  #   depends_on:
  #     otel-uptrace:
  #       condition: service_healthy

  # kafka-broker-1:
  #   image: alpine
  #   command: sleep infinity
  #   stop_grace_period: 1s
  #
  # kafka-broker-2:
  #   image: alpine
  #   command: sleep infinity
  #   stop_grace_period: 1s
  #
  # zookeeper:
  #   image: alpine
  #   command: sleep infinity
  #   stop_grace_period: 1s
